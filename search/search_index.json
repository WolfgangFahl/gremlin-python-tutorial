{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"gremlin-python-tutorial API Documentation","text":""},{"location":"#gremlin.draw","title":"<code>draw</code>","text":"<p>Created on 2023-05-15</p> <p>@author: jv</p>"},{"location":"#gremlin.draw.GremlinDraw","title":"<code>GremlinDraw</code>","text":"<p>helper class to draw Gremlin Graphs via Graphviz</p> Source code in <code>gremlin/draw.py</code> <pre><code>class GremlinDraw:\n    \"\"\"\n    helper class to draw Gremlin Graphs via Graphviz\n    \"\"\"\n\n    def __init__(\n        self, g: GraphTraversalSource, title: str, config: GremlinDrawConfig = None\n    ):\n        \"\"\"\n        constructor\n        \"\"\"\n        self.g = g\n        self.title = title\n        if config is None:\n            config = GremlinDrawConfig()\n        self.config = config\n        self.gviz: graphviz.Digraph = graphviz.Digraph(\n            title, format=config.output_format\n        )\n        # keep track of the vertices and edges drawn\n        self.v_drawn = {}\n        self.e_drawn = {}\n\n    def __as_label(self, head, body: str) -&gt; str:\n        \"\"\"\n        create a label from head and body separated by a dash\n        with the configured width\n        \"\"\"\n        # note the UTF-8 dash ...\n        dash = \"\u2500\" * self.config.dash_width\n        label = f\"{head}\\n{dash}\\n{body}\"\n        return label\n\n    def get_vertex_properties(self, vertex: Vertex) -&gt; list:\n        \"\"\"\n        get the properties for a given vertex\n        \"\"\"\n        # developer note: see https://github.com/apache/tinkerpop/blob/master/gremlin-python/src/main/python/gremlin_python/structure/graph.py#LL58C23-L58C23\n        # has properties but these are not set as for gremlin-python 3.7.0\n\n        # get the properties of the vertex (work around)\n        kvp_list = list(next(self.g.V(vertex).element_map()).items())\n        # non-property items are of type aenum\n        properties = [item for item in kvp_list if not isinstance(item[0], Enum)]\n        assert len(properties) == len(kvp_list) - 2  # ID and label are not properties\n        if self.config.vertex_properties is not None:\n            properties = [\n                item for item in properties if item[0] in self.config.vertex_properties\n            ]\n        return properties\n\n    def get_edge_properties(self, edge: Edge) -&gt; list:\n        # developer note: see https://github.com/apache/tinkerpop/blob/master/gremlin-python/src/main/python/gremlin_python/structure/graph.py#L66\n        # when gremlin-python 3.7.0 is released, the following code might be improved (get the properties using edge.properties)\n        # e_props=edge.properties\n        # 2023-08-21: WF tested - but properties are not set ...\n        # then, g can also be removed as a parameter\n        # get the properties of the edge\n        edge_t = self.g.E(edge)\n        try:\n            edge_map = edge_t.element_map().next()\n            kvp_list = list(edge_map.items())\n        except StopIteration:\n            pass\n            return []\n\n        # Workaround, because the above line does not work due to inconsistencies / bugs in the gremlin-python library\n        # kvp_list = [edge_element_map for edge_element_map in self.g.E().element_map().to_list() if edge_element_map[T.id] == edge.id][0].items()\n        # non-property items are of type aenum\n        properties = [item for item in kvp_list if not isinstance(item[0], Enum)]\n        assert (\n            len(properties) == len(kvp_list) - 4\n        )  # ID, label, in, and out are not properties\n        if self.config.edge_properties is not None:\n            properties = [\n                item for item in properties if item[0] in self.config.edge_properties\n            ]\n        return properties\n\n    def draw_vertex(self, vertex: Vertex):\n        \"\"\"\n        draw a single given vertex\n        \"\"\"\n        # avoid drawing to many vertices\n        if len(self.v_drawn) &gt;= self.config.v_limit:\n            return\n        if vertex.id in self.v_drawn:\n            return\n        properties = self.get_vertex_properties(vertex)\n        properties_label = \"\\n\".join(f\"{key}: {value}\" for key, value in properties)\n        head = f\"{str(vertex.id)}\\n{vertex.label}\"\n        body = f\"{properties_label}\"\n        label = self.__as_label(head, body)\n        # draw the vertex\n        self.gviz.node(\n            name=str(vertex.id),\n            label=f\"{label}\",\n            fillcolor=f\"{self.config.fillcolor}\",\n            style=\"filled\",\n            fontname=f\"{self.config.fontname}\",\n        )\n        self.v_drawn[vertex.id] = vertex\n\n    def draw_edge(self, edge: Edge, with_vertices: bool = True):\n        \"\"\"\n        draw a single given edge\n        \"\"\"\n        # avoid drawing to many vertices\n        if len(self.e_drawn) &gt;= self.config.e_limit:\n            return\n        if edge.id in self.e_drawn:\n            return\n        if with_vertices:\n            self.draw_vertex(edge.inV)\n            self.draw_vertex(edge.outV)\n            pass\n        properties = self.get_edge_properties(edge)\n        properties_label = \"\\n\".join(f\"{key}: {value}\" for key, value in properties)\n        head = f\"{str(edge.id)}\\n{edge.label}\"\n        body = properties_label\n        label = self.__as_label(head, body)\n        # get the image of the edge by id\n        in_vertex_id = edge.inV.id\n        out_vertex_id = edge.outV.id\n\n        # draw the edge\n        self.gviz.edge(\n            tail_name=str(out_vertex_id),\n            head_name=str(in_vertex_id),\n            label=f\"{label}\",\n            style=f\"setlinewidth({self.config.edge_line_width})\",\n            fontname=f\"{self.config.fontname}\",\n        )\n        self.e_drawn[edge.id] = edge\n\n    def draw_g(self):\n        # draw vertices\n        vlist = self.g.V().to_list()\n        vlist = vlist[: self.config.v_limit]\n\n        for v in vlist:\n            self.draw_vertex(v)\n\n        # draw edges\n        elist = self.g.E().to_list()\n        elist = elist[: self.config.e_limit]\n\n        for e in elist:\n            self.draw_edge(e)\n\n    def draw(self, gt: Union[GraphTraversal, Any]):\n        # developer note: when moving the minimum supported version up to 3.10, the following code can be greatly improved by using match statements\n        worklist: List[Any] = (\n            gt.to_list()\n            if isinstance(gt, GraphTraversal)\n            else list(gt) if isinstance(gt, Iterable) else [gt]\n        )\n\n        while len(worklist) &gt; 0:\n            # move any vertices to the front of the worklist (draw them first)\n            worklist = [item for item in worklist if not isinstance(item, Vertex)] + [\n                item for item in worklist if isinstance(item, Vertex)\n            ]\n\n            result = worklist.pop(0)\n\n            if isinstance(result, Vertex):\n                self.draw_vertex(result)\n            elif isinstance(result, Edge):\n                self.draw_edge(result)\n            elif isinstance(result, Path):\n                for item in result.objects:\n                    worklist.append(item)\n            elif isinstance(result, dict):\n                if T.id in result:\n                    # check if the id is a vertex or an edge\n                    if self.g.V(result[T.id]).hasNext():\n                        self.draw_vertex(next(self.g.V(result[T.id])))\n                    elif self.g.E(result[T.id]).hasNext():\n                        self.draw_edge(self.g.E(result[T.id]).next())\n                    else:\n                        # raise Exception(\"id not found\")\n                        pass  # silent skip\n                else:\n                    # raise Exception(\"id not found\")\n                    pass  # silent skip\n            else:\n                # raise Exception(f\"unknown type: {type(result)}\")\n                pass  # silent skip\n\n    @staticmethod\n    def show(\n        g: GraphTraversalSource,\n        title: str = \"Gremlin\",\n        v_limit: int = 10,\n        e_limit: int = 10,\n    ) -&gt; graphviz.Digraph:\n        \"\"\"\n        draw the given graph\n        \"\"\"\n        gd = GremlinDraw(g=g, title=title)\n        gd.config.v_limit = v_limit\n        gd.config.e_limit = e_limit\n        gd.draw_g()\n        return gd.gviz\n\n    @staticmethod\n    def show_graph_traversal(\n        g: GraphTraversalSource, gt: Union[GraphTraversal, Any], title: str = \"Gremlin\"\n    ) -&gt; graphviz.Digraph:\n        \"\"\"\n        draw the given graph traversal\n        \"\"\"\n        gd = GremlinDraw(g=g, title=title)\n        gd.draw(gt)\n        return gd.gviz\n</code></pre>"},{"location":"#gremlin.draw.GremlinDraw.__as_label","title":"<code>__as_label(head, body)</code>","text":"<p>create a label from head and body separated by a dash with the configured width</p> Source code in <code>gremlin/draw.py</code> <pre><code>def __as_label(self, head, body: str) -&gt; str:\n    \"\"\"\n    create a label from head and body separated by a dash\n    with the configured width\n    \"\"\"\n    # note the UTF-8 dash ...\n    dash = \"\u2500\" * self.config.dash_width\n    label = f\"{head}\\n{dash}\\n{body}\"\n    return label\n</code></pre>"},{"location":"#gremlin.draw.GremlinDraw.__init__","title":"<code>__init__(g, title, config=None)</code>","text":"<p>constructor</p> Source code in <code>gremlin/draw.py</code> <pre><code>def __init__(\n    self, g: GraphTraversalSource, title: str, config: GremlinDrawConfig = None\n):\n    \"\"\"\n    constructor\n    \"\"\"\n    self.g = g\n    self.title = title\n    if config is None:\n        config = GremlinDrawConfig()\n    self.config = config\n    self.gviz: graphviz.Digraph = graphviz.Digraph(\n        title, format=config.output_format\n    )\n    # keep track of the vertices and edges drawn\n    self.v_drawn = {}\n    self.e_drawn = {}\n</code></pre>"},{"location":"#gremlin.draw.GremlinDraw.draw_edge","title":"<code>draw_edge(edge, with_vertices=True)</code>","text":"<p>draw a single given edge</p> Source code in <code>gremlin/draw.py</code> <pre><code>def draw_edge(self, edge: Edge, with_vertices: bool = True):\n    \"\"\"\n    draw a single given edge\n    \"\"\"\n    # avoid drawing to many vertices\n    if len(self.e_drawn) &gt;= self.config.e_limit:\n        return\n    if edge.id in self.e_drawn:\n        return\n    if with_vertices:\n        self.draw_vertex(edge.inV)\n        self.draw_vertex(edge.outV)\n        pass\n    properties = self.get_edge_properties(edge)\n    properties_label = \"\\n\".join(f\"{key}: {value}\" for key, value in properties)\n    head = f\"{str(edge.id)}\\n{edge.label}\"\n    body = properties_label\n    label = self.__as_label(head, body)\n    # get the image of the edge by id\n    in_vertex_id = edge.inV.id\n    out_vertex_id = edge.outV.id\n\n    # draw the edge\n    self.gviz.edge(\n        tail_name=str(out_vertex_id),\n        head_name=str(in_vertex_id),\n        label=f\"{label}\",\n        style=f\"setlinewidth({self.config.edge_line_width})\",\n        fontname=f\"{self.config.fontname}\",\n    )\n    self.e_drawn[edge.id] = edge\n</code></pre>"},{"location":"#gremlin.draw.GremlinDraw.draw_vertex","title":"<code>draw_vertex(vertex)</code>","text":"<p>draw a single given vertex</p> Source code in <code>gremlin/draw.py</code> <pre><code>def draw_vertex(self, vertex: Vertex):\n    \"\"\"\n    draw a single given vertex\n    \"\"\"\n    # avoid drawing to many vertices\n    if len(self.v_drawn) &gt;= self.config.v_limit:\n        return\n    if vertex.id in self.v_drawn:\n        return\n    properties = self.get_vertex_properties(vertex)\n    properties_label = \"\\n\".join(f\"{key}: {value}\" for key, value in properties)\n    head = f\"{str(vertex.id)}\\n{vertex.label}\"\n    body = f\"{properties_label}\"\n    label = self.__as_label(head, body)\n    # draw the vertex\n    self.gviz.node(\n        name=str(vertex.id),\n        label=f\"{label}\",\n        fillcolor=f\"{self.config.fillcolor}\",\n        style=\"filled\",\n        fontname=f\"{self.config.fontname}\",\n    )\n    self.v_drawn[vertex.id] = vertex\n</code></pre>"},{"location":"#gremlin.draw.GremlinDraw.get_vertex_properties","title":"<code>get_vertex_properties(vertex)</code>","text":"<p>get the properties for a given vertex</p> Source code in <code>gremlin/draw.py</code> <pre><code>def get_vertex_properties(self, vertex: Vertex) -&gt; list:\n    \"\"\"\n    get the properties for a given vertex\n    \"\"\"\n    # developer note: see https://github.com/apache/tinkerpop/blob/master/gremlin-python/src/main/python/gremlin_python/structure/graph.py#LL58C23-L58C23\n    # has properties but these are not set as for gremlin-python 3.7.0\n\n    # get the properties of the vertex (work around)\n    kvp_list = list(next(self.g.V(vertex).element_map()).items())\n    # non-property items are of type aenum\n    properties = [item for item in kvp_list if not isinstance(item[0], Enum)]\n    assert len(properties) == len(kvp_list) - 2  # ID and label are not properties\n    if self.config.vertex_properties is not None:\n        properties = [\n            item for item in properties if item[0] in self.config.vertex_properties\n        ]\n    return properties\n</code></pre>"},{"location":"#gremlin.draw.GremlinDraw.show","title":"<code>show(g, title='Gremlin', v_limit=10, e_limit=10)</code>  <code>staticmethod</code>","text":"<p>draw the given graph</p> Source code in <code>gremlin/draw.py</code> <pre><code>@staticmethod\ndef show(\n    g: GraphTraversalSource,\n    title: str = \"Gremlin\",\n    v_limit: int = 10,\n    e_limit: int = 10,\n) -&gt; graphviz.Digraph:\n    \"\"\"\n    draw the given graph\n    \"\"\"\n    gd = GremlinDraw(g=g, title=title)\n    gd.config.v_limit = v_limit\n    gd.config.e_limit = e_limit\n    gd.draw_g()\n    return gd.gviz\n</code></pre>"},{"location":"#gremlin.draw.GremlinDraw.show_graph_traversal","title":"<code>show_graph_traversal(g, gt, title='Gremlin')</code>  <code>staticmethod</code>","text":"<p>draw the given graph traversal</p> Source code in <code>gremlin/draw.py</code> <pre><code>@staticmethod\ndef show_graph_traversal(\n    g: GraphTraversalSource, gt: Union[GraphTraversal, Any], title: str = \"Gremlin\"\n) -&gt; graphviz.Digraph:\n    \"\"\"\n    draw the given graph traversal\n    \"\"\"\n    gd = GremlinDraw(g=g, title=title)\n    gd.draw(gt)\n    return gd.gviz\n</code></pre>"},{"location":"#gremlin.draw.GremlinDrawConfig","title":"<code>GremlinDrawConfig</code>  <code>dataclass</code>","text":"<p>draw configuration parameters</p> Source code in <code>gremlin/draw.py</code> <pre><code>@dataclass\nclass GremlinDrawConfig:\n    \"\"\"\n    draw configuration parameters\n    \"\"\"\n\n    fontname: str = \"arial\"\n    fillcolor: str = \"#ADE1FE\"\n    output_format: str = \"pdf\"\n    edge_line_width: int = 3\n    dash_width: int = 5  # number of dashes to apply\n    v_limit: int = 10  # maximum number of vertices to show\n    e_limit: int = 10  # maximum number of edges to show\n    # optionally set the properties to be displayed\n    vertex_properties: List[str] = None  # New filter for vertex properties\n    edge_properties: List[str] = None  # New filter for edge properties\n</code></pre>"},{"location":"#gremlin.examples","title":"<code>examples</code>","text":""},{"location":"#gremlin.examples.Example","title":"<code>Example</code>  <code>dataclass</code>","text":"Source code in <code>gremlin/examples.py</code> <pre><code>@dataclass\nclass Example:\n    name: str\n    url: str\n\n    def load(\n        self,\n        g: GraphTraversalSource,\n        volume: Volume,\n        force: bool = False,\n        debug: bool = False,\n    ) -&gt; None:\n        \"\"\"\n        download graph from remote_path to local_path depending on force flag\n        and load graph into g\n\n        Args:\n            g(GraphTraversalSource): the target graph (inout)\n            volume:Volume\n            force(bool): if True download even if local copy already exists\n            debug(bool): if True show debugging information\n        \"\"\"\n        self.download(volume.local_path, force=force, debug=debug)\n        graph_xml = f\"{volume.remote_path}/{self.name}.xml\"\n        RemoteTraversal.load(g, graph_xml)\n\n    def download(self, path, force: bool = False, debug: bool = False) -&gt; str:\n        \"\"\"\n        load the graphml xml file from the given url and store it to the given file_name (prefix)\n\n        Args:\n            url(str): the url to use\n            file_name(str): the name of the file to load\n            force(bool): if True overwrite\n            debug(bool): if True show debugging information\n\n        Returns:\n            str: the filename loaded\n        \"\"\"\n        graph_xml = f\"{path}/{self.name}.xml\"\n        # check whether file exists and is size 0 which indicates\n        # a failed download attempt\n        if os.path.exists(graph_xml):\n            stats = os.stat(graph_xml)\n            size = stats.st_size\n            force = force or size == 0\n            if debug:\n                print(f\"{graph_xml}(size {size}) already downloaded ...\")\n        if not os.path.exists(graph_xml) or force:\n            if debug:\n                print(f\"downloading {self.url} to {graph_xml} ...\")\n            graph_data = urllib.request.urlopen(self.url).read().decode(\"utf-8\")\n            print(graph_data, file=open(graph_xml, \"w\"))\n        return graph_xml\n</code></pre>"},{"location":"#gremlin.examples.Example.download","title":"<code>download(path, force=False, debug=False)</code>","text":"<p>load the graphml xml file from the given url and store it to the given file_name (prefix)</p> <p>Parameters:</p> Name Type Description Default <code>url(str)</code> <p>the url to use</p> required <code>file_name(str)</code> <p>the name of the file to load</p> required <code>force(bool)</code> <p>if True overwrite</p> required <code>debug(bool)</code> <p>if True show debugging information</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the filename loaded</p> Source code in <code>gremlin/examples.py</code> <pre><code>def download(self, path, force: bool = False, debug: bool = False) -&gt; str:\n    \"\"\"\n    load the graphml xml file from the given url and store it to the given file_name (prefix)\n\n    Args:\n        url(str): the url to use\n        file_name(str): the name of the file to load\n        force(bool): if True overwrite\n        debug(bool): if True show debugging information\n\n    Returns:\n        str: the filename loaded\n    \"\"\"\n    graph_xml = f\"{path}/{self.name}.xml\"\n    # check whether file exists and is size 0 which indicates\n    # a failed download attempt\n    if os.path.exists(graph_xml):\n        stats = os.stat(graph_xml)\n        size = stats.st_size\n        force = force or size == 0\n        if debug:\n            print(f\"{graph_xml}(size {size}) already downloaded ...\")\n    if not os.path.exists(graph_xml) or force:\n        if debug:\n            print(f\"downloading {self.url} to {graph_xml} ...\")\n        graph_data = urllib.request.urlopen(self.url).read().decode(\"utf-8\")\n        print(graph_data, file=open(graph_xml, \"w\"))\n    return graph_xml\n</code></pre>"},{"location":"#gremlin.examples.Example.load","title":"<code>load(g, volume, force=False, debug=False)</code>","text":"<p>download graph from remote_path to local_path depending on force flag and load graph into g</p> <p>Parameters:</p> Name Type Description Default <code>g(GraphTraversalSource)</code> <p>the target graph (inout)</p> required <code>volume</code> <code>Volume</code> <p>Volume</p> required <code>force(bool)</code> <p>if True download even if local copy already exists</p> required <code>debug(bool)</code> <p>if True show debugging information</p> required Source code in <code>gremlin/examples.py</code> <pre><code>def load(\n    self,\n    g: GraphTraversalSource,\n    volume: Volume,\n    force: bool = False,\n    debug: bool = False,\n) -&gt; None:\n    \"\"\"\n    download graph from remote_path to local_path depending on force flag\n    and load graph into g\n\n    Args:\n        g(GraphTraversalSource): the target graph (inout)\n        volume:Volume\n        force(bool): if True download even if local copy already exists\n        debug(bool): if True show debugging information\n    \"\"\"\n    self.download(volume.local_path, force=force, debug=debug)\n    graph_xml = f\"{volume.remote_path}/{self.name}.xml\"\n    RemoteTraversal.load(g, graph_xml)\n</code></pre>"},{"location":"#gremlin.examples.Examples","title":"<code>Examples</code>","text":"<p>Examples</p> Source code in <code>gremlin/examples.py</code> <pre><code>class Examples:\n    \"\"\"\n    Examples\n    \"\"\"\n\n    def __init__(self, volume: Volume, debug: bool = False):\n        \"\"\"\n        Constructor\n\n        Args:\n            volume:Volume\n            debug(bool): if true switch on debugging\n\n        \"\"\"\n        self.debug = debug\n        self.volume = volume\n        self.examples_by_name = {}\n        for example in [\n            Example(\n                name=\"tinkerpop-modern\",\n                url=\"https://raw.githubusercontent.com/apache/tinkerpop/master/data/tinkerpop-modern.xml\",\n            ),\n            Example(\n                name=\"grateful-dead\",\n                url=\"https://raw.githubusercontent.com/apache/tinkerpop/master/data/grateful-dead.xml\",\n            ),\n            Example(\n                name=\"air-routes-small\",\n                url=\"https://raw.githubusercontent.com/krlawrence/graph/master/sample-data/air-routes-small.graphml\",\n            ),\n            Example(\n                name=\"air-routes-latest\",\n                url=\"https://raw.githubusercontent.com/krlawrence/graph/master/sample-data/air-routes-latest.graphml\",\n            ),\n        ]:\n            self.examples_by_name[example.name] = example\n\n    def load_by_name(self, g: GraphTraversalSource, name: str) -&gt; None:\n        \"\"\"\n        load an example by name to the given graph\n\n        Args:\n            g(GraphTraversalSource): the target graph (inout)\n            name(str): the name of the example\n\n        Raises:\n            Exception: if the example does not exist\n        \"\"\"\n        if name in self.examples_by_name:\n            example = self.examples_by_name[name]\n            example.load(g, self.volume, debug=self.debug)\n        else:\n            raise Exception(f\"invalid example {name}\")\n</code></pre>"},{"location":"#gremlin.examples.Examples.__init__","title":"<code>__init__(volume, debug=False)</code>","text":"<p>Constructor</p> <p>Parameters:</p> Name Type Description Default <code>volume</code> <code>Volume</code> <p>Volume</p> required <code>debug(bool)</code> <p>if true switch on debugging</p> required Source code in <code>gremlin/examples.py</code> <pre><code>def __init__(self, volume: Volume, debug: bool = False):\n    \"\"\"\n    Constructor\n\n    Args:\n        volume:Volume\n        debug(bool): if true switch on debugging\n\n    \"\"\"\n    self.debug = debug\n    self.volume = volume\n    self.examples_by_name = {}\n    for example in [\n        Example(\n            name=\"tinkerpop-modern\",\n            url=\"https://raw.githubusercontent.com/apache/tinkerpop/master/data/tinkerpop-modern.xml\",\n        ),\n        Example(\n            name=\"grateful-dead\",\n            url=\"https://raw.githubusercontent.com/apache/tinkerpop/master/data/grateful-dead.xml\",\n        ),\n        Example(\n            name=\"air-routes-small\",\n            url=\"https://raw.githubusercontent.com/krlawrence/graph/master/sample-data/air-routes-small.graphml\",\n        ),\n        Example(\n            name=\"air-routes-latest\",\n            url=\"https://raw.githubusercontent.com/krlawrence/graph/master/sample-data/air-routes-latest.graphml\",\n        ),\n    ]:\n        self.examples_by_name[example.name] = example\n</code></pre>"},{"location":"#gremlin.examples.Examples.load_by_name","title":"<code>load_by_name(g, name)</code>","text":"<p>load an example by name to the given graph</p> <p>Parameters:</p> Name Type Description Default <code>g(GraphTraversalSource)</code> <p>the target graph (inout)</p> required <code>name(str)</code> <p>the name of the example</p> required <p>Raises:</p> Type Description <code>Exception</code> <p>if the example does not exist</p> Source code in <code>gremlin/examples.py</code> <pre><code>def load_by_name(self, g: GraphTraversalSource, name: str) -&gt; None:\n    \"\"\"\n    load an example by name to the given graph\n\n    Args:\n        g(GraphTraversalSource): the target graph (inout)\n        name(str): the name of the example\n\n    Raises:\n        Exception: if the example does not exist\n    \"\"\"\n    if name in self.examples_by_name:\n        example = self.examples_by_name[name]\n        example.load(g, self.volume, debug=self.debug)\n    else:\n        raise Exception(f\"invalid example {name}\")\n</code></pre>"},{"location":"#gremlin.examples.Volume","title":"<code>Volume</code>  <code>dataclass</code>","text":"<p>map a local path on the client to a remote path on a server e.g. when using a Volume in a docker container</p> Source code in <code>gremlin/examples.py</code> <pre><code>@dataclass\nclass Volume:\n    \"\"\"\n    map a local path on the client to a remote\n    path on a server e.g. when using a Volume in a docker\n    container\n    \"\"\"\n\n    local_path: str\n    remote_path: str\n\n    def local(self, file_name: str):\n        \"\"\"\n        return the local mapping of the given file_name\n\n        Args:\n            file_name(str): the file name to map\n        Returns:\n            str: the local path\n        \"\"\"\n        path = f\"{self.local_path}/{file_name}\"\n        return path\n\n    def remote(self, file_name: str):\n        \"\"\"\n        return the remote mapping of the given file_name\n\n        Args:\n            file_name(str): the file name to map\n        Returns:\n            str: the remote path\n        \"\"\"\n        path = f\"{self.remote_path}/{file_name}\"\n        return path\n\n    @staticmethod\n    def docker() -&gt; \"Volume\":\n        \"\"\"\n        get the default docker volume mapping\n\n        Returns:\n            Volume: the local_path/remote_path mapping\n        \"\"\"\n        home = str(Path.home())\n        local_path = f\"{home}/.gremlin-examples\"\n        os.makedirs(local_path, exist_ok=True)\n        remote_path = \"/opt/gremlin-server/data/examples\"\n        volume = Volume(local_path=local_path, remote_path=remote_path)\n        return volume\n\n    @staticmethod\n    def local() -&gt; \"Volume\":\n        \"\"\"\n        get the default local volume mapping\n\n        Returns:\n            Volume: the local_path/remote_path mapping\n        \"\"\"\n        home = str(Path.home())\n        local_path = f\"{home}/.gremlin-examples\"\n        os.makedirs(local_path, exist_ok=True)\n        remote_path = str(abspath(f\"{dirname(abspath(__file__))}/data\"))\n        volume = Volume(local_path=local_path, remote_path=remote_path)\n        return volume\n</code></pre>"},{"location":"#gremlin.examples.Volume.docker","title":"<code>docker()</code>  <code>staticmethod</code>","text":"<p>get the default docker volume mapping</p> <p>Returns:</p> Name Type Description <code>Volume</code> <code>Volume</code> <p>the local_path/remote_path mapping</p> Source code in <code>gremlin/examples.py</code> <pre><code>@staticmethod\ndef docker() -&gt; \"Volume\":\n    \"\"\"\n    get the default docker volume mapping\n\n    Returns:\n        Volume: the local_path/remote_path mapping\n    \"\"\"\n    home = str(Path.home())\n    local_path = f\"{home}/.gremlin-examples\"\n    os.makedirs(local_path, exist_ok=True)\n    remote_path = \"/opt/gremlin-server/data/examples\"\n    volume = Volume(local_path=local_path, remote_path=remote_path)\n    return volume\n</code></pre>"},{"location":"#gremlin.examples.Volume.local","title":"<code>local()</code>  <code>staticmethod</code>","text":"<p>get the default local volume mapping</p> <p>Returns:</p> Name Type Description <code>Volume</code> <code>Volume</code> <p>the local_path/remote_path mapping</p> Source code in <code>gremlin/examples.py</code> <pre><code>@staticmethod\ndef local() -&gt; \"Volume\":\n    \"\"\"\n    get the default local volume mapping\n\n    Returns:\n        Volume: the local_path/remote_path mapping\n    \"\"\"\n    home = str(Path.home())\n    local_path = f\"{home}/.gremlin-examples\"\n    os.makedirs(local_path, exist_ok=True)\n    remote_path = str(abspath(f\"{dirname(abspath(__file__))}/data\"))\n    volume = Volume(local_path=local_path, remote_path=remote_path)\n    return volume\n</code></pre>"},{"location":"#gremlin.examples.Volume.remote","title":"<code>remote(file_name)</code>","text":"<p>return the remote mapping of the given file_name</p> <p>Parameters:</p> Name Type Description Default <code>file_name(str)</code> <p>the file name to map</p> required <p>Returns:     str: the remote path</p> Source code in <code>gremlin/examples.py</code> <pre><code>def remote(self, file_name: str):\n    \"\"\"\n    return the remote mapping of the given file_name\n\n    Args:\n        file_name(str): the file name to map\n    Returns:\n        str: the remote path\n    \"\"\"\n    path = f\"{self.remote_path}/{file_name}\"\n    return path\n</code></pre>"},{"location":"#gremlin.remote","title":"<code>remote</code>","text":"<p>Created on 2019-09-17</p> <p>@author: wf</p>"},{"location":"#gremlin.remote.RemoteTraversal","title":"<code>RemoteTraversal</code>","text":"<p>helper class for Apache Tinkerpop Gremlin Python GLV remote access</p> Source code in <code>gremlin/remote.py</code> <pre><code>class RemoteTraversal:\n    \"\"\"\n    helper class for Apache Tinkerpop Gremlin Python GLV remote access\n    \"\"\"\n\n    def __init__(self, server: Server, in_jupyter: bool = False) -&gt; None:\n        \"\"\"\n        constructor\n\n        \"\"\"\n        self.server = server\n        self.in_jupyter = in_jupyter\n\n    @staticmethod\n    def fromYaml(\n        serverName=\"server\", config_path: Optional[str] = None, in_jupyter: bool = False\n    ) -&gt; \"RemoteTraversal\":\n        \"\"\"\n        create a server from the given yaml file\n\n        Args:\n            serverName(str): the servername to use\n            config_path(str): the path to the server configuration file\n        \"\"\"\n        server = Server.read(serverName, config_path)\n        rt = RemoteTraversal(server, in_jupyter=in_jupyter)\n        return rt\n\n    def g(self) -&gt; GraphTraversalSource:\n        \"\"\"\n        get the graph traversal source\n\n        Returns:\n            the graph traversal source\n        \"\"\"\n        server = self.server\n        url = f\"ws://{server.host}:{server.port}/gremlin\"\n        # https://github.com/orientechnologies/orientdb-gremlin/issues/143\n        # username=\"root\"\n        # password=\"rootpwd\"\n        if self.in_jupyter:\n            self.remoteConnection = DriverRemoteConnection(\n                url,\n                server.alias,\n                username=server.username,\n                password=server.password,\n                transport_factory=lambda: AiohttpTransport(call_from_event_loop=True),\n            )\n        else:\n            self.remoteConnection = DriverRemoteConnection(\n                url, server.alias, username=server.username, password=server.password\n            )\n        g = traversal().withRemote(self.remoteConnection)\n        return g\n\n    def close(self) -&gt; None:\n        \"\"\"\n        close my connection\n        \"\"\"\n        self.remoteConnection.close()\n\n    @staticmethod\n    def load(g: GraphTraversalSource, graphmlFile) -&gt; None:\n        \"\"\"\n        load the given graph from the given graphmlFile\n        \"\"\"\n        # make the local file accessible to the server\n        xmlPath = os.path.abspath(graphmlFile)\n        # drop the existing content of the graph\n        g.V().drop().iterate()\n        # read the content from the graphmlFile\n        g.io(xmlPath).read().iterate()\n\n    @staticmethod\n    def clear(g: GraphTraversalSource) -&gt; None:\n        \"\"\"\n        clear the given graph\n        \"\"\"\n        g.V().drop().iterate()\n</code></pre>"},{"location":"#gremlin.remote.RemoteTraversal.__init__","title":"<code>__init__(server, in_jupyter=False)</code>","text":"<p>constructor</p> Source code in <code>gremlin/remote.py</code> <pre><code>def __init__(self, server: Server, in_jupyter: bool = False) -&gt; None:\n    \"\"\"\n    constructor\n\n    \"\"\"\n    self.server = server\n    self.in_jupyter = in_jupyter\n</code></pre>"},{"location":"#gremlin.remote.RemoteTraversal.clear","title":"<code>clear(g)</code>  <code>staticmethod</code>","text":"<p>clear the given graph</p> Source code in <code>gremlin/remote.py</code> <pre><code>@staticmethod\ndef clear(g: GraphTraversalSource) -&gt; None:\n    \"\"\"\n    clear the given graph\n    \"\"\"\n    g.V().drop().iterate()\n</code></pre>"},{"location":"#gremlin.remote.RemoteTraversal.close","title":"<code>close()</code>","text":"<p>close my connection</p> Source code in <code>gremlin/remote.py</code> <pre><code>def close(self) -&gt; None:\n    \"\"\"\n    close my connection\n    \"\"\"\n    self.remoteConnection.close()\n</code></pre>"},{"location":"#gremlin.remote.RemoteTraversal.fromYaml","title":"<code>fromYaml(serverName='server', config_path=None, in_jupyter=False)</code>  <code>staticmethod</code>","text":"<p>create a server from the given yaml file</p> <p>Parameters:</p> Name Type Description Default <code>serverName(str)</code> <p>the servername to use</p> required <code>config_path(str)</code> <p>the path to the server configuration file</p> required Source code in <code>gremlin/remote.py</code> <pre><code>@staticmethod\ndef fromYaml(\n    serverName=\"server\", config_path: Optional[str] = None, in_jupyter: bool = False\n) -&gt; \"RemoteTraversal\":\n    \"\"\"\n    create a server from the given yaml file\n\n    Args:\n        serverName(str): the servername to use\n        config_path(str): the path to the server configuration file\n    \"\"\"\n    server = Server.read(serverName, config_path)\n    rt = RemoteTraversal(server, in_jupyter=in_jupyter)\n    return rt\n</code></pre>"},{"location":"#gremlin.remote.RemoteTraversal.g","title":"<code>g()</code>","text":"<p>get the graph traversal source</p> <p>Returns:</p> Type Description <code>GraphTraversalSource</code> <p>the graph traversal source</p> Source code in <code>gremlin/remote.py</code> <pre><code>def g(self) -&gt; GraphTraversalSource:\n    \"\"\"\n    get the graph traversal source\n\n    Returns:\n        the graph traversal source\n    \"\"\"\n    server = self.server\n    url = f\"ws://{server.host}:{server.port}/gremlin\"\n    # https://github.com/orientechnologies/orientdb-gremlin/issues/143\n    # username=\"root\"\n    # password=\"rootpwd\"\n    if self.in_jupyter:\n        self.remoteConnection = DriverRemoteConnection(\n            url,\n            server.alias,\n            username=server.username,\n            password=server.password,\n            transport_factory=lambda: AiohttpTransport(call_from_event_loop=True),\n        )\n    else:\n        self.remoteConnection = DriverRemoteConnection(\n            url, server.alias, username=server.username, password=server.password\n        )\n    g = traversal().withRemote(self.remoteConnection)\n    return g\n</code></pre>"},{"location":"#gremlin.remote.RemoteTraversal.load","title":"<code>load(g, graphmlFile)</code>  <code>staticmethod</code>","text":"<p>load the given graph from the given graphmlFile</p> Source code in <code>gremlin/remote.py</code> <pre><code>@staticmethod\ndef load(g: GraphTraversalSource, graphmlFile) -&gt; None:\n    \"\"\"\n    load the given graph from the given graphmlFile\n    \"\"\"\n    # make the local file accessible to the server\n    xmlPath = os.path.abspath(graphmlFile)\n    # drop the existing content of the graph\n    g.V().drop().iterate()\n    # read the content from the graphmlFile\n    g.io(xmlPath).read().iterate()\n</code></pre>"},{"location":"#gremlin.remote.Server","title":"<code>Server</code>","text":"<p>Server description</p> Source code in <code>gremlin/remote.py</code> <pre><code>class Server:\n    \"\"\"\n    Server description\n    \"\"\"\n\n    debug = False\n\n    # construct me with the given alias\n    def __init__(\n        self,\n        host: str = \"localhost\",\n        port: int = 8182,\n        alias: str = \"g\",\n        name: str = \"TinkerGraph\",\n        username: str = \"\",\n        password: str = \"\",\n        debug: bool = False,\n        helpUrl: str = \"http://wiki.bitplan.com/index.php/Gremlin_python#Connecting_to_Gremlin_enabled_graph_databases\",\n    ) -&gt; None:\n        \"\"\"\n        constructor\n\n        Args:\n            host(str): the host to connect to\n            port(int): the port to connect to\n            alias(str): the alias to use\n            name(str): the name of the server\n            username(Optional[str]): the username to use\n            password(Optional[str]): the password to use\n            debug(bool): True if debug output should be generated\n            helpUrl(str): the help url to use\n        \"\"\"\n        self.host = host\n        self.port = port\n        self.alias = alias\n        self.name = name\n        self.username = username\n        self.password = password\n        Server.debug = debug\n        self.helpUrl = helpUrl\n\n    def check_socket(self) -&gt; bool:\n        \"\"\"\n        check my socket\n\n        Returns:\n            True if socket is open\n        \"\"\"\n        with closing(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) as sock:\n            is_open = sock.connect_ex((self.host, self.port)) == 0\n            return is_open\n\n    # return a readable representation of me\n    def __repr__(self) -&gt; str:\n        return \"%s(%r)\" % (self.__class__, self.__dict__)\n\n    @staticmethod\n    def read(name: str, config_path: Optional[str] = None) -&gt; \"Server\":\n        \"\"\"\n        read me from a yaml file\n\n        Args:\n            name(str): the name of the server\n            config_path(str): the path to the config files\n\n        Returns:\n            the server\n\n        Raises:\n            Exception: if the yaml file is missing\n        \"\"\"\n        if config_path is None:\n            script_path = dirname(abspath(__file__))\n            config_path = abspath(f\"{script_path}/config\")\n        yamlFile = f\"{config_path}/{name}.yaml\"\n        # is there a yamlFile for the given name\n        if os.path.isfile(yamlFile):\n            with io.open(yamlFile, \"r\") as stream:\n                if Server.debug:\n                    print(\"reading %s\" % (yamlFile))\n                server = yaml.load(stream, Loader=yaml.Loader)\n                if Server.debug:\n                    print(server)\n                return server\n        else:\n            raise Exception(f\"{yamlFile} is missing\")\n\n    # write me to my yaml file\n    def write(self) -&gt; None:\n        \"\"\"\n        write me to my yaml file\n        \"\"\"\n        yamlFile = self.name + \".yaml\"\n        with io.open(yamlFile, \"w\", encoding=\"utf-8\") as stream:\n            yaml.dump(self, stream)\n            if Server.debug:\n                print(yaml.dump(self))\n</code></pre>"},{"location":"#gremlin.remote.Server.__init__","title":"<code>__init__(host='localhost', port=8182, alias='g', name='TinkerGraph', username='', password='', debug=False, helpUrl='http://wiki.bitplan.com/index.php/Gremlin_python#Connecting_to_Gremlin_enabled_graph_databases')</code>","text":"<p>constructor</p> <p>Parameters:</p> Name Type Description Default <code>host(str)</code> <p>the host to connect to</p> required <code>port(int)</code> <p>the port to connect to</p> required <code>alias(str)</code> <p>the alias to use</p> required <code>name(str)</code> <p>the name of the server</p> required <code>username(Optional[str])</code> <p>the username to use</p> required <code>password(Optional[str])</code> <p>the password to use</p> required <code>debug(bool)</code> <p>True if debug output should be generated</p> required <code>helpUrl(str)</code> <p>the help url to use</p> required Source code in <code>gremlin/remote.py</code> <pre><code>def __init__(\n    self,\n    host: str = \"localhost\",\n    port: int = 8182,\n    alias: str = \"g\",\n    name: str = \"TinkerGraph\",\n    username: str = \"\",\n    password: str = \"\",\n    debug: bool = False,\n    helpUrl: str = \"http://wiki.bitplan.com/index.php/Gremlin_python#Connecting_to_Gremlin_enabled_graph_databases\",\n) -&gt; None:\n    \"\"\"\n    constructor\n\n    Args:\n        host(str): the host to connect to\n        port(int): the port to connect to\n        alias(str): the alias to use\n        name(str): the name of the server\n        username(Optional[str]): the username to use\n        password(Optional[str]): the password to use\n        debug(bool): True if debug output should be generated\n        helpUrl(str): the help url to use\n    \"\"\"\n    self.host = host\n    self.port = port\n    self.alias = alias\n    self.name = name\n    self.username = username\n    self.password = password\n    Server.debug = debug\n    self.helpUrl = helpUrl\n</code></pre>"},{"location":"#gremlin.remote.Server.check_socket","title":"<code>check_socket()</code>","text":"<p>check my socket</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if socket is open</p> Source code in <code>gremlin/remote.py</code> <pre><code>def check_socket(self) -&gt; bool:\n    \"\"\"\n    check my socket\n\n    Returns:\n        True if socket is open\n    \"\"\"\n    with closing(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) as sock:\n        is_open = sock.connect_ex((self.host, self.port)) == 0\n        return is_open\n</code></pre>"},{"location":"#gremlin.remote.Server.read","title":"<code>read(name, config_path=None)</code>  <code>staticmethod</code>","text":"<p>read me from a yaml file</p> <p>Parameters:</p> Name Type Description Default <code>name(str)</code> <p>the name of the server</p> required <code>config_path(str)</code> <p>the path to the config files</p> required <p>Returns:</p> Type Description <code>'Server'</code> <p>the server</p> <p>Raises:</p> Type Description <code>Exception</code> <p>if the yaml file is missing</p> Source code in <code>gremlin/remote.py</code> <pre><code>@staticmethod\ndef read(name: str, config_path: Optional[str] = None) -&gt; \"Server\":\n    \"\"\"\n    read me from a yaml file\n\n    Args:\n        name(str): the name of the server\n        config_path(str): the path to the config files\n\n    Returns:\n        the server\n\n    Raises:\n        Exception: if the yaml file is missing\n    \"\"\"\n    if config_path is None:\n        script_path = dirname(abspath(__file__))\n        config_path = abspath(f\"{script_path}/config\")\n    yamlFile = f\"{config_path}/{name}.yaml\"\n    # is there a yamlFile for the given name\n    if os.path.isfile(yamlFile):\n        with io.open(yamlFile, \"r\") as stream:\n            if Server.debug:\n                print(\"reading %s\" % (yamlFile))\n            server = yaml.load(stream, Loader=yaml.Loader)\n            if Server.debug:\n                print(server)\n            return server\n    else:\n        raise Exception(f\"{yamlFile} is missing\")\n</code></pre>"},{"location":"#gremlin.remote.Server.write","title":"<code>write()</code>","text":"<p>write me to my yaml file</p> Source code in <code>gremlin/remote.py</code> <pre><code>def write(self) -&gt; None:\n    \"\"\"\n    write me to my yaml file\n    \"\"\"\n    yamlFile = self.name + \".yaml\"\n    with io.open(yamlFile, \"w\", encoding=\"utf-8\") as stream:\n        yaml.dump(self, stream)\n        if Server.debug:\n            print(yaml.dump(self))\n</code></pre>"}]}